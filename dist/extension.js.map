{"version":3,"sources":[".././src/extension.ts",".././src/webviewProvider.ts","../external \"vscode\"","../webpack/bootstrap","../webpack/startup"],"names":[],"mappings":"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","file":"extension.js","sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from 'vscode';\r\nimport SidebarMarkdownNotesProvider from './webviewProvider';\r\n\r\n// this method is called when your extension is activated\r\n// your extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\r\n  // This line of code will only be executed once when your extension is activated\r\n\r\n  const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 1000);\r\n  context.subscriptions.push(statusBar);\r\n\r\n  const provider = new SidebarMarkdownNotesProvider(context.extensionUri, statusBar);\r\n\r\n  // register some listener that make sure the status bar\r\n  // item always up-to-date\r\n  // context.subscriptions.push(vscode.window.onDidChangeActiveTextEditor(provider.updateStatusBar));\r\n  // context.subscriptions.push(vscode.window.onDidChangeTextEditorSelection(provider.updateStatusBar));\r\n\r\n  context.subscriptions.push(vscode.window.registerWebviewViewProvider(SidebarMarkdownNotesProvider.viewId, provider));\r\n\r\n  // The command has been defined in the package.json file\r\n  // Now provide the implementation of the command with registerCommand\r\n  // The commandId parameter must match the command field in package.json\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand('sidebar-markdown-notes.togglePreview', () => {\r\n      // The code you place here will be executed every time your command is executed\r\n      provider.togglePreview();\r\n    })\r\n  );\r\n\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand('sidebar-markdown-notes.previousPage', () => {\r\n      provider.previousPage();\r\n    })\r\n  );\r\n\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand('sidebar-markdown-notes.nextPage', () => {\r\n      provider.nextPage();\r\n    })\r\n  );\r\n\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand('sidebar-markdown-notes.resetData', () => {\r\n      provider.resetData();\r\n    })\r\n  );\r\n}\r\n\r\n// this method is called when your extension is deactivated\r\nexport function deactivate() {}\r\n","// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from 'vscode';\r\n\r\nexport default class SidebarMarkdownNotesProvider implements vscode.WebviewViewProvider {\r\n  public static readonly viewId = 'sidebarMarkdownNotes.webview';\r\n\r\n  private _view?: vscode.WebviewView;\r\n\r\n  private config = vscode.workspace.getConfiguration('sidebar-markdown-notes');\r\n\r\n  constructor(private readonly _extensionUri: vscode.Uri, private _statusBar?: vscode.StatusBarItem) {}\r\n\r\n  /**\r\n   * Revolves a webview view.\r\n   *\r\n   * `resolveWebviewView` is called when a view first becomes visible. This may happen when the view is\r\n   * first loaded or when the user hides and then shows a view again.\r\n   *\r\n   * @param webviewView Webview view to restore. The provider should take ownership of this view. The\r\n   *    provider must set the webview's `.html` and hook up all webview events it is interested in.\r\n   * @param context Additional metadata about the view being resolved.\r\n   * @param token Cancellation token indicating that the view being provided is no longer needed.\r\n   *\r\n   * @return Optional thenable indicating that the view has been fully resolved.\r\n   */\r\n  public resolveWebviewView(webviewView: vscode.WebviewView) {\r\n    this._view = webviewView;\r\n\r\n    webviewView.webview.options = {\r\n      // Allow scripts in the webview\r\n      enableScripts: true,\r\n      localResourceRoots: [this._extensionUri]\r\n    };\r\n\r\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n\r\n    webviewView.webview.onDidReceiveMessage((data) => {\r\n      switch (data.type) {\r\n        case 'log': {\r\n          vscode.window.showInformationMessage(`${data.value}`);\r\n          break;\r\n        }\r\n        case 'updateStatusBar': {\r\n          this.updateStatusBar(data.value);\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    vscode.workspace.onDidChangeConfiguration((e) => {\r\n      if (e.affectsConfiguration('sidebar-markdown-notes')) {\r\n        this.config = vscode.workspace.getConfiguration('sidebar-markdown-notes');\r\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n      }\r\n    });\r\n  }\r\n\r\n  public resetData() {\r\n    if (this._view) {\r\n      this._view.webview.postMessage({ type: 'resetData' });\r\n    }\r\n  }\r\n\r\n  public togglePreview() {\r\n    if (this._view) {\r\n      this._view.webview.postMessage({ type: 'togglePreview' });\r\n    }\r\n  }\r\n\r\n  public previousPage() {\r\n    if (this._view) {\r\n      this._view.webview.postMessage({ type: 'previousPage' });\r\n    }\r\n  }\r\n\r\n  public nextPage() {\r\n    if (this._view) {\r\n      this._view.webview.postMessage({ type: 'nextPage' });\r\n    }\r\n  }\r\n\r\n  public updateStatusBar(content?: string) {\r\n    if (this._statusBar) {\r\n      if (content) {\r\n        this._statusBar.text = `${content}`;\r\n        this._statusBar.show();\r\n      } else {\r\n        this._statusBar.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _getHtmlForWebview(webview: vscode.Webview) {\r\n    const purifyUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'lib', 'purify.min.js'));\r\n\r\n    const markedUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'lib', 'marked.min.js'));\r\n\r\n    const lodashUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'lib', 'lodash.min.js'));\r\n\r\n    // Get the local path to main script run in the webview, then convert it to a uri we can use in the webview.\r\n    const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'main.js'));\r\n\r\n    // Do the same for the stylesheet.\r\n    const styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'reset.css'));\r\n    const markdownCss = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'markdown.css'));\r\n    const styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'vscode.css'));\r\n    const styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'main.css'));\r\n\r\n    // Use a nonce to only allow a specific script to be run.\r\n    const nonce = this._getNonce();\r\n\r\n    return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"UTF-8\">\r\n\r\n\t\t\t\t<!--\r\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\r\n\t\t\t\t\tand only allow scripts that have a specific nonce.\r\n\t\t\t\t-->\r\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${\r\n          webview.cspSource\r\n        }; script-src 'nonce-${nonce}';\">\r\n\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\r\n        <link href=\"${styleResetUri}\" rel=\"stylesheet\">\r\n        <link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\r\n        <link href=\"${markdownCss}\" rel=\"stylesheet\">\r\n\t\t\t\t<link href=\"${styleMainUri}\" rel=\"stylesheet\">\r\n\r\n\t\t\t\t<title>Sidebar markdown notes</title>\r\n\t\t\t</head>\r\n      <body>\r\n\r\n        <div id=\"render\"></div>\r\n        <div id=\"content\"><textarea id=\"text-input\" name=\"text-input\" placeholder=\"Start by typing your markdown notes...\"></textarea></div>\r\n\r\n        <script nonce=\"${nonce}\">\r\n          (function () {\r\n            const renderElement = document.getElementById('render');\r\n            const editorElement = document.getElementById('content');\r\n\r\n            renderElement.style.paddingLeft = ${this.config.get<boolean>('leftMargin') === true ? '\"20px\"' : '\"0px\"'};\r\n            editorElement.style.paddingLeft = ${this.config.get<boolean>('leftMargin') === true ? '\"20px\"' : '\"0px\"'};\r\n          })();\r\n        </script>\r\n        <script nonce=\"${nonce}\" src=\"${lodashUri}\"></script>\r\n        <script nonce=\"${nonce}\" src=\"${purifyUri}\"></script>\r\n        <script nonce=\"${nonce}\" src=\"${markedUri}\"></script>\r\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\r\n\t\t\t</body>\r\n\t\t\t</html>`;\r\n  }\r\n\r\n  private _getNonce() {\r\n    let text = '';\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (let i = 0; i < 32; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  }\r\n}\r\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/extension.ts\");\n"],"sourceRoot":""}